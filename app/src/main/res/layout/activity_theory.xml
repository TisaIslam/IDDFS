<?xml version="1.0" encoding="utf-8"?>
<ScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@android:color/black"
    android:gravity="top">


<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    tools:context="com.example.abida.ids_new.theory"
    android:weightSum="1"
    android:background="#f10a0a0a">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="@android:dimen/app_icon_size"
        android:text="Definition : \n "
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:id="@+id/t1"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:text="In computer science, iterative deepening search or more specifically iterative deepening depth-first search[1] (IDS or IDDFS) is a state space/graph search strategy in which a depth-limited version of depth-first search is run repeatedly with increasing depth limits until the goal is found. IDDFS is equivalent to breadth-first search, but uses much less memory; on each iteration, it visits the nodes in the search tree in the same order as depth-first search, but the cumulative order in which nodes are first visited is effectively breadth-first."
        android:id="@+id/t2" />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:textSize="@android:dimen/app_icon_size"
        android:text="\nProblems of DFS\n"
        android:id="@+id/t3"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:text="In a depth-first search, you begin at some node in the graph and continuously explore deeper and deeper into the graph while you can find new nodes that you haven't yet reached (or until you find the solution). Any time the DFS runs out of moves, it backtracks to the latest point where it could make a different choice, then explores out from there. This can be a serious problem if your graph is extremely large and there's only one solution, since you might end up exploring the entire graph along one DFS path only to find the solution after looking at each node. Worse, if the graph is infinite (perhaps your graph consists of all the numbers, for example), the search might not terminate. Moreover, once you find the node you're looking for, you might not have the optimal path to it (you could have looped all over the graph looking for the solution even though it was right next to the start node!)"
        android:id="@+id/t4"
        android:layout_weight="0.10" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:textSize="@android:dimen/app_icon_size"

        android:text="\nHow can it be fixed ?\n"
        android:id="@+id/t5"
        />


    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:text="One potential fix to this problem would be to limit the depth of any one path taken by the DFS. For example, we might do a DFS search, but stop the search if we ever take a path of length greater than 5. This ensures that we never explore any node that's of distance greater than five from the start node, meaning that we never explore out infinitely or (unless the graph is extremely dense) we don't search the entire graph. However, this does mean that we might not find the node we're looking for, since we don't necessarily explore the entire graph."
        android:id="@+id/t6"
        />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="@android:dimen/app_icon_size"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"

        android:text="\nHow can IDDS fix this?\n"
        android:id="@+id/t7"
        />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:text="we might try exploring using all paths of length one, then all paths of length two, then length three, etc. until we end up finding the node in question. This means that we never end up exploring along infinite dead-end paths, since the length of each path is capped by some length at each step. It also means that we find the shortest possible path to the destination node, since if we didn't find the node at depth d but did find it at depth d + 1, there can't be a path of length d (or we would have taken it), so the path of length d + 1 is indeed optimal."
        android:id="@+id/t8"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:textSize="@android:dimen/app_icon_size"
        android:text="\nHow is it different from BFS ?\n"
        android:id="@+id/t9"
        />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColorHighlight="#E071ECD7"
        android:textColor="#E071ECD7"
        android:text="The reason that this is different from BFS is that in a BFS, you have to hold all of the fringe nodes in memory at once. This takes memory O(bd), where b is the branching factor. Compare this to the O(d) memory usage from iterative deepening (to hold the state for each of the d nodes in the current path). Of course, BFS never explores the same path multiple times, while iterative deepening may explore any path several times as it increases the depth limit. However, asymptotically the two have the same runtime. BFS terminates in O(bd) steps after considering all O(bd) nodes at distance d. Iterative deepening uses O(bd) time per level, which sums up to O(bd) overall, but with a higher constant factor."
        android:id="@+id/t10"
        android:layout_weight="0.18" />

</LinearLayout></ScrollView>